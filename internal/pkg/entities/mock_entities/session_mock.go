// Code generated by MockGen. DO NOT EDIT.
// Source: session.go

// Package mock_entities is a generated GoMock package.
package mock_entities

import (
	entities "AdHub/internal/pkg/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionUseCaseInterface is a mock of SessionUseCaseInterface interface.
type MockSessionUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSessionUseCaseInterfaceMockRecorder
}

// MockSessionUseCaseInterfaceMockRecorder is the mock recorder for MockSessionUseCaseInterface.
type MockSessionUseCaseInterfaceMockRecorder struct {
	mock *MockSessionUseCaseInterface
}

// NewMockSessionUseCaseInterface creates a new mock instance.
func NewMockSessionUseCaseInterface(ctrl *gomock.Controller) *MockSessionUseCaseInterface {
	mock := &MockSessionUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockSessionUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionUseCaseInterface) EXPECT() *MockSessionUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockSessionUseCaseInterface) Auth(arg0 *entities.User) (*entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", arg0)
	ret0, _ := ret[0].(*entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockSessionUseCaseInterfaceMockRecorder) Auth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockSessionUseCaseInterface)(nil).Auth), arg0)
}

// GetUserId mocks base method.
func (m *MockSessionUseCaseInterface) GetUserId(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockSessionUseCaseInterfaceMockRecorder) GetUserId(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockSessionUseCaseInterface)(nil).GetUserId), token)
}

// SessionContains mocks base method.
func (m *MockSessionUseCaseInterface) SessionContains(sr *entities.Session) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionContains", sr)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionContains indicates an expected call of SessionContains.
func (mr *MockSessionUseCaseInterfaceMockRecorder) SessionContains(sr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionContains", reflect.TypeOf((*MockSessionUseCaseInterface)(nil).SessionContains), sr)
}

// SessionCreate mocks base method.
func (m *MockSessionUseCaseInterface) SessionCreate(sr *entities.Session) (*entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionCreate", sr)
	ret0, _ := ret[0].(*entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionCreate indicates an expected call of SessionCreate.
func (mr *MockSessionUseCaseInterfaceMockRecorder) SessionCreate(sr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionCreate", reflect.TypeOf((*MockSessionUseCaseInterface)(nil).SessionCreate), sr)
}

// SessionRead mocks base method.
func (m *MockSessionUseCaseInterface) SessionRead(sr *entities.Session) (*entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionRead", sr)
	ret0, _ := ret[0].(*entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionRead indicates an expected call of SessionRead.
func (mr *MockSessionUseCaseInterfaceMockRecorder) SessionRead(sr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionRead", reflect.TypeOf((*MockSessionUseCaseInterface)(nil).SessionRead), sr)
}

// SessionRemove mocks base method.
func (m *MockSessionUseCaseInterface) SessionRemove(sr *entities.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionRemove", sr)
	ret0, _ := ret[0].(error)
	return ret0
}

// SessionRemove indicates an expected call of SessionRemove.
func (mr *MockSessionUseCaseInterfaceMockRecorder) SessionRemove(sr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionRemove", reflect.TypeOf((*MockSessionUseCaseInterface)(nil).SessionRemove), sr)
}

// MockSessionRepoInterface is a mock of SessionRepoInterface interface.
type MockSessionRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepoInterfaceMockRecorder
}

// MockSessionRepoInterfaceMockRecorder is the mock recorder for MockSessionRepoInterface.
type MockSessionRepoInterfaceMockRecorder struct {
	mock *MockSessionRepoInterface
}

// NewMockSessionRepoInterface creates a new mock instance.
func NewMockSessionRepoInterface(ctrl *gomock.Controller) *MockSessionRepoInterface {
	mock := &MockSessionRepoInterface{ctrl: ctrl}
	mock.recorder = &MockSessionRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepoInterface) EXPECT() *MockSessionRepoInterfaceMockRecorder {
	return m.recorder
}

// Contains mocks base method.
func (m *MockSessionRepoInterface) Contains(s *entities.Session) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", s)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Contains indicates an expected call of Contains.
func (mr *MockSessionRepoInterfaceMockRecorder) Contains(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockSessionRepoInterface)(nil).Contains), s)
}

// Create mocks base method.
func (m *MockSessionRepoInterface) Create(s *entities.Session) (*entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", s)
	ret0, _ := ret[0].(*entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessionRepoInterfaceMockRecorder) Create(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionRepoInterface)(nil).Create), s)
}

// Read mocks base method.
func (m *MockSessionRepoInterface) Read(s *entities.Session) (*entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", s)
	ret0, _ := ret[0].(*entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSessionRepoInterfaceMockRecorder) Read(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSessionRepoInterface)(nil).Read), s)
}

// Remove mocks base method.
func (m *MockSessionRepoInterface) Remove(s *entities.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockSessionRepoInterfaceMockRecorder) Remove(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSessionRepoInterface)(nil).Remove), s)
}
