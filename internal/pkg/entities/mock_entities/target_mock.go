// Code generated by MockGen. DO NOT EDIT.
// Source: target.go

// Package mock_entities is a generated GoMock package.
package mock_entities

import (
	entities "AdHub/internal/pkg/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTargetRepoInterface is a mock of TargetRepoInterface interface.
type MockTargetRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTargetRepoInterfaceMockRecorder
}

// MockTargetRepoInterfaceMockRecorder is the mock recorder for MockTargetRepoInterface.
type MockTargetRepoInterfaceMockRecorder struct {
	mock *MockTargetRepoInterface
}

// NewMockTargetRepoInterface creates a new mock instance.
func NewMockTargetRepoInterface(ctrl *gomock.Controller) *MockTargetRepoInterface {
	mock := &MockTargetRepoInterface{ctrl: ctrl}
	mock.recorder = &MockTargetRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetRepoInterface) EXPECT() *MockTargetRepoInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTargetRepoInterface) Create(s *entities.Target) (*entities.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", s)
	ret0, _ := ret[0].(*entities.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTargetRepoInterfaceMockRecorder) Create(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTargetRepoInterface)(nil).Create), s)
}

// GetTargetInterests mocks base method.
func (m *MockTargetRepoInterface) GetTargetInterests(targetID int) ([]entities.Interest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetInterests", targetID)
	ret0, _ := ret[0].([]entities.Interest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetInterests indicates an expected call of GetTargetInterests.
func (mr *MockTargetRepoInterfaceMockRecorder) GetTargetInterests(targetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetInterests", reflect.TypeOf((*MockTargetRepoInterface)(nil).GetTargetInterests), targetID)
}

// GetTargetRegions mocks base method.
func (m *MockTargetRepoInterface) GetTargetRegions(targetID int) ([]entities.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetRegions", targetID)
	ret0, _ := ret[0].([]entities.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetRegions indicates an expected call of GetTargetRegions.
func (mr *MockTargetRepoInterfaceMockRecorder) GetTargetRegions(targetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetRegions", reflect.TypeOf((*MockTargetRepoInterface)(nil).GetTargetRegions), targetID)
}

// GetTargetTags mocks base method.
func (m *MockTargetRepoInterface) GetTargetTags(targetID int) ([]entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetTags", targetID)
	ret0, _ := ret[0].([]entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetTags indicates an expected call of GetTargetTags.
func (mr *MockTargetRepoInterfaceMockRecorder) GetTargetTags(targetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetTags", reflect.TypeOf((*MockTargetRepoInterface)(nil).GetTargetTags), targetID)
}

// Read mocks base method.
func (m *MockTargetRepoInterface) Read(id int) (*entities.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", id)
	ret0, _ := ret[0].(*entities.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTargetRepoInterfaceMockRecorder) Read(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTargetRepoInterface)(nil).Read), id)
}

// Remove mocks base method.
func (m *MockTargetRepoInterface) Remove(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockTargetRepoInterfaceMockRecorder) Remove(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockTargetRepoInterface)(nil).Remove), id)
}

// Update mocks base method.
func (m *MockTargetRepoInterface) Update(s *entities.Target) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTargetRepoInterfaceMockRecorder) Update(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTargetRepoInterface)(nil).Update), s)
}

// MockTargetUseCaseInterface is a mock of TargetUseCaseInterface interface.
type MockTargetUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTargetUseCaseInterfaceMockRecorder
}

// MockTargetUseCaseInterfaceMockRecorder is the mock recorder for MockTargetUseCaseInterface.
type MockTargetUseCaseInterfaceMockRecorder struct {
	mock *MockTargetUseCaseInterface
}

// NewMockTargetUseCaseInterface creates a new mock instance.
func NewMockTargetUseCaseInterface(ctrl *gomock.Controller) *MockTargetUseCaseInterface {
	mock := &MockTargetUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockTargetUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetUseCaseInterface) EXPECT() *MockTargetUseCaseInterfaceMockRecorder {
	return m.recorder
}

// TargetCreate mocks base method.
func (m *MockTargetUseCaseInterface) TargetCreate(s *entities.Target) (*entities.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetCreate", s)
	ret0, _ := ret[0].(*entities.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TargetCreate indicates an expected call of TargetCreate.
func (mr *MockTargetUseCaseInterfaceMockRecorder) TargetCreate(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetCreate", reflect.TypeOf((*MockTargetUseCaseInterface)(nil).TargetCreate), s)
}

// TargetRead mocks base method.
func (m *MockTargetUseCaseInterface) TargetRead(id int) (*entities.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetRead", id)
	ret0, _ := ret[0].(*entities.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TargetRead indicates an expected call of TargetRead.
func (mr *MockTargetUseCaseInterfaceMockRecorder) TargetRead(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetRead", reflect.TypeOf((*MockTargetUseCaseInterface)(nil).TargetRead), id)
}

// TargetRemove mocks base method.
func (m *MockTargetUseCaseInterface) TargetRemove(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetRemove", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TargetRemove indicates an expected call of TargetRemove.
func (mr *MockTargetUseCaseInterfaceMockRecorder) TargetRemove(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetRemove", reflect.TypeOf((*MockTargetUseCaseInterface)(nil).TargetRemove), id)
}

// TargetUpdate mocks base method.
func (m *MockTargetUseCaseInterface) TargetUpdate(s *entities.Target) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetUpdate", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// TargetUpdate indicates an expected call of TargetUpdate.
func (mr *MockTargetUseCaseInterfaceMockRecorder) TargetUpdate(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetUpdate", reflect.TypeOf((*MockTargetUseCaseInterface)(nil).TargetUpdate), s)
}
