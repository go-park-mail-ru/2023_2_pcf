// Code generated by MockGen. DO NOT EDIT.
// Source: interest.go

// Package mock_entities is a generated GoMock package.
package mock_entities

import (
	entities "AdHub/internal/pkg/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterestRepoInterface is a mock of InterestRepoInterface interface.
type MockInterestRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterestRepoInterfaceMockRecorder
}

// MockInterestRepoInterfaceMockRecorder is the mock recorder for MockInterestRepoInterface.
type MockInterestRepoInterfaceMockRecorder struct {
	mock *MockInterestRepoInterface
}

// NewMockInterestRepoInterface creates a new mock instance.
func NewMockInterestRepoInterface(ctrl *gomock.Controller) *MockInterestRepoInterface {
	mock := &MockInterestRepoInterface{ctrl: ctrl}
	mock.recorder = &MockInterestRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterestRepoInterface) EXPECT() *MockInterestRepoInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInterestRepoInterface) Create(s *entities.Interest) (*entities.Interest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", s)
	ret0, _ := ret[0].(*entities.Interest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInterestRepoInterfaceMockRecorder) Create(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInterestRepoInterface)(nil).Create), s)
}

// Read mocks base method.
func (m *MockInterestRepoInterface) Read(id int) (*entities.Interest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", id)
	ret0, _ := ret[0].(*entities.Interest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockInterestRepoInterfaceMockRecorder) Read(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockInterestRepoInterface)(nil).Read), id)
}

// Remove mocks base method.
func (m *MockInterestRepoInterface) Remove(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockInterestRepoInterfaceMockRecorder) Remove(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockInterestRepoInterface)(nil).Remove), id)
}

// Update mocks base method.
func (m *MockInterestRepoInterface) Update(s *entities.Interest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockInterestRepoInterfaceMockRecorder) Update(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInterestRepoInterface)(nil).Update), s)
}
