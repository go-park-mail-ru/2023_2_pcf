// Code generated by MockGen. DO NOT EDIT.
// Source: SessionStorage.go

// Package mock_auth is a generated GoMock package.
package mock_session

import (
	auth "AdHub/pkg/auth"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionStorageInterface is a mock of SessionStorageInterface interface.
type MockSessionStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStorageInterfaceMockRecorder
}

// MockSessionStorageInterfaceMockRecorder is the mock recorder for MockSessionStorageInterface.
type MockSessionStorageInterfaceMockRecorder struct {
	mock *MockSessionStorageInterface
}

// NewMockSessionStorageInterface creates a new mock instance.
func NewMockSessionStorageInterface(ctrl *gomock.Controller) *MockSessionStorageInterface {
	mock := &MockSessionStorageInterface{ctrl: ctrl}
	mock.recorder = &MockSessionStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionStorageInterface) EXPECT() *MockSessionStorageInterfaceMockRecorder {
	return m.recorder
}

// AddSession mocks base method.
func (m *MockSessionStorageInterface) AddSession(session auth.Session) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSession", session)
}

// AddSession indicates an expected call of AddSession.
func (mr *MockSessionStorageInterfaceMockRecorder) AddSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockSessionStorageInterface)(nil).AddSession), session)
}

// Contains mocks base method.
func (m *MockSessionStorageInterface) Contains(token string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", token)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *MockSessionStorageInterfaceMockRecorder) Contains(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockSessionStorageInterface)(nil).Contains), token)
}

// GetUserId mocks base method.
func (m *MockSessionStorageInterface) GetUserId(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockSessionStorageInterfaceMockRecorder) GetUserId(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockSessionStorageInterface)(nil).GetUserId), token)
}

// RemoveSession mocks base method.
func (m *MockSessionStorageInterface) RemoveSession(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveSession", token)
}

// RemoveSession indicates an expected call of RemoveSession.
func (mr *MockSessionStorageInterfaceMockRecorder) RemoveSession(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSession", reflect.TypeOf((*MockSessionStorageInterface)(nil).RemoveSession), token)
}

// RemoveUser mocks base method.
func (m *MockSessionStorageInterface) RemoveUser(userId int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveUser", userId)
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockSessionStorageInterfaceMockRecorder) RemoveUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockSessionStorageInterface)(nil).RemoveUser), userId)
}
